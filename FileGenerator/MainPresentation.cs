using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace FileGenerator
{
    class MainPresentation
    {
        static void Main(string[] args)
        {
            Console.WriteLine("============Squidski's KV File Generator============");
            if (args.Length == 0)
            {
                Console.WriteLine("No command line parameters were supplied");
                Console.WriteLine("Press any key to exit");
                Console.ReadKey();
                Environment.Exit(0);
            }
            else
            {
                //Read Map Name, CT, and T keyvalues from VMF
                Console.WriteLine("Game Directory: " + args[0]);
                Console.WriteLine("VMF Directory: " + args[1] + ".vmf");
                Console.WriteLine("Parsing VMF...");
                threevalue tresval = ParseVMF(args[1] + ".vmf");
                int ctFaction = tresval.valone;
                int tFaction = tresval.valtwo;
                string mapName = tresval.valthree;
                Console.WriteLine("Parsing VMF Completed Sucessfully");

                //Create .kv file in /csgo/maps
                Console.WriteLine("Creating .kv file in csgo/maps directory...");
                string mapsDir = args[0] + "\\maps\\";
                if (File.Exists(mapsDir + mapName + ".kv"))
                {
                    Console.WriteLine(".kv file already exists. Overwriting...");
                    File.Delete(mapsDir + mapName + ".kv");
                    File.Create(mapsDir + mapName + ".kv").Dispose();

                }
                else
                {
                    File.Create(mapsDir + mapName + ".kv").Dispose();
                }
                Console.WriteLine("Successfully Created .kv file in csgo/maps directory");

                //Write map name and other stuff to .kv file
                NameDefs namelist = new NameDefs();
                string[] ctFactionList = namelist.GetCTFaction(ctFaction);
                string[] tFactionList = namelist.GetTFaction(tFaction);
                Console.WriteLine("Writing info to .kv file");
                SquidFileWriter(ctFactionList, tFactionList, mapName, mapsDir + mapName + ".kv");

                //Close Program
                Console.WriteLine("KV File Sucessfully Created");
                Console.WriteLine("Press any key to exit");
                Console.ReadKey();
                Environment.Exit(0);
            }
        }

        public static threevalue ParseVMF(string mapDirectory)
        {
            VMFParse vmf = new VMFParse();
            threevalue tresval = new threevalue();
            tresval = vmf.ParseVMF(mapDirectory);
            return tresval;
        }

        private static void SquidFileWriter(string[] ctFaction, string[] tFaction, string mapName, string kvPath)
        {
            string doubleTab = "\t\t";
            using (StreamWriter sw = File.AppendText(kvPath))
            {
                sw.WriteLine("\"" + mapName + "\"");
                sw.WriteLine("{");
                sw.WriteLine("\t\"name\" \t" + '"' + mapName + '"');
                sw.WriteLine("\t\"t_models\"");
                sw.WriteLine("\t{");
                foreach (string s in tFaction) sw.WriteLine(doubleTab + s);
                sw.WriteLine("\t}");
                sw.WriteLine("\t\"ct_models\"");
                sw.WriteLine("\t{");
                foreach (string s in ctFaction) sw.WriteLine(doubleTab + s);
                sw.WriteLine("\t}");
                sw.WriteLine("}");
                sw.WriteLine("");
                sw.WriteLine("");
                sw.WriteLine(doubleTab + doubleTab + "// Generated by Squid's KVFileGenerator Tool");
                Console.WriteLine("Successfully wrote info to .kv file");
            }
        }
    }
}

